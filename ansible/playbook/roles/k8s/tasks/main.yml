---
# Instalar k8s
- name: Quitar interface 0
  shell: echo "DEVICE=eth0" > /etc/sysconfig/network-scripts/ifcfg-eth0 && service network restart
  ignore_errors: yes
    
- name: Desactivar SELINUX
  selinux:
    state: disabled
  
- name: Reiniciaar
  reboot:
  
#- name: actualizar sistema
#  yum: 
#    name: "*" 
#    state: latest
#    disable_excludes: all
#    exclude: kubernetes


- name: Instalar wget
  package: name=wget state=present

- name: Añadir modulo br_netfilter
  modprobe:
    name: br_netfilter
    state: present

- name: Añadir masquerade FW
  firewalld:
    masquerade: yes
    state: enabled
    permanent: yes

- name: Poner parametros kernel
  ansible.posix.sysctl:
    name: "{{ item }}"
    value: '1'
    sysctl_file: /etc/sysctl.d/k8s.conf
    reload: yes
  with_items:
    - net.bridge.bridge-nf-call-ip6tables
    - net.bridge.bridge-nf-call-iptables
    - net.ipv4.ip_forward

- name: Desactivar swap
  command: swapoff -a

- name: Quitar swap permanentemente
  replace:
    path: /etc/fstab
    regexp: '^(\s*)([^#\n]+\s+)(\w+\s+)swap(\s+.*)$'
    replace: '#\1\2\3swap\4'
    backup: yes

- name: Download CRI-O
  ansible.builtin.get_url:
    url: "{{ item }}"
    dest: /etc/yum.repos.d/
    mode: '0440'
  with_items:
    - "https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/{{ os }}/devel:kubic:libcontainers:stable.repo"
    - "https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:{{ version }}/{{ os }}/devel:kubic:libcontainers:stable:cri-o:{{ version }}.repo"

- name: Instalar CRI-O
  package: 
    name: cri-o
    state: present

- name: Copiar fichero de cri-o
  template:
    src: crio.conf.j2
    dest: /etc/modules-load.d/crio.conf
    owner: root
    group: root
    mode: 0644

- name: Arrancar CRI-O
  service:
    name: crio
    state: started
    enabled: true

- name: Repositorio k8s
  yum_repository:
    name: Kubernetes
    description: Kubernetes Repository
    baseurl: http://yum.kubernetes.io/repos/kubernetes-el7-x86_64
    enabled: yes
    gpgcheck: yes
    gpgkey: 
      - https://packages.cloud.google.com/yum/doc/yum-key.gpg
      - https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg


- name: Instalar paquetes 
#  yum:
#    name: "{{ item }}"
#    state: latest
#    disable_excludes: all
#    exclude: kubernetes
#  with_items:
#    - kubelet
#    - kubeadm
#    - kubectl
  shell: "dnf -y install iproute-tc kubelet kubeadm kubectl --disableexcludes=kubernetes"

- name: Activar kubelet
  service:
    name: kubelet
    state: started
    enabled: true

- name: reglas de firewall
  firewalld:
    port: "{{item }}"
    state: enabled
    permanent: true
    immediate: true
  with_items: "{{port_firewall}}"

- name: Recargar del firewall 
  shell: "firewall-cmd --list-all; firewall-cmd --list-services"
  register: resultado_fw

- name: Imprimir salida firewall
  debug:
    msg: "{{ resultado_fw.stdout_lines }}"

- name: Configurar kubeadm
  shell: "kubeadm config images pull; kubeadm init --apiserver-advertise-address={{ ip_server }} --apiserver-cert-extra-sans={{ ip_server }} --node-name={{ nombre }} --pod-network-cidr={{ red_pod }}; export KUBECONFIG=/etc/kubernetes/admin.conf"
  register: resultado_ka

- name: Imprimir salida kubeadm
  debug:
    msg: "{{ resultado_ka.stdout_lines }}"

- name: Crear directorios
  file:
    path: $HOME/.kube
    state: directory
    owner: "{{ usuario }}"
    group: "{{ grupo }}"
    mode: 0750
  become: false

- name: copiar admin.conf
  copy:
    remote_src: yes
    src: /etc/kubernetes/admin.conf 
    dest: /home/{{ usuario }}/.kube/config
    owner: "{{ usuario }}"
    group: "{{ grupo }}"
    mode: '0640'

- name: Instalar el operador Tigera
  shell: "kubectl create -f https://docs.projectcalico.org/manifests/tigera-operator.yaml"
  register: resultado_Tigera
  become: false
  ignore_errors: yes

- name: Imprimir salida Tigera
  debug:
    msg: "{{ resultado_Tigera.stdout_lines }}"

- name: Copiar fichero de custom-resources.yaml
  template:
    src: custom-resources.yaml.j2
    dest: /tmp/custom-resources.yaml
    owner: root
    group: root
    mode: 0644
    
- name: Copiar fichero de canal.yaml
  template:
    src: canal.yaml.j2
    dest: /tmp/canal.yaml
    owner: root
    group: root
    mode: 0644

#- name: Instalar Calico y Ingres
#  shell: "kubectl apply -f /tmp/custom-resources.yaml; kubectl apply -f https://docs.projectcalico.org/manifests/canal.yaml; kubectl apply -f https://raw.githubusercontent.com/haproxytech/kubernetes-ingress/master/deploy/haproxy-ingress.yaml"
#  register: resultado_calico
#  become: false

- name: Instalar Calico y Ingres
  shell: "kubectl apply -f /tmp/custom-resources.yaml; kubectl apply -f https://raw.githubusercontent.com/haproxytech/kubernetes-ingress/master/deploy/haproxy-ingress.yaml"
  register: resultado_calico
  become: false

- name: Imprimir salida calico y Ingres
  debug:
    msg: "{{ resultado_calico.stdout_lines }}"

- name: Generate join command
  command: kubeadm token create --print-join-command
  register: join_command

- name: Copy join command for {{ k8s_cluster_name }} cluster to local file
  become: false
  local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./{{ nombre }}-join-command"
  
- name: Setting host facts using key=value pairs, this format can only create strings or booleans
  set_fact: node_fact="{{ join_command.stdout_lines[0] }}" cacheable=yes

- name: Reiniciaar
  reboot: