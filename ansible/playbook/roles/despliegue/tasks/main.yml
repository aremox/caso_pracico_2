---
# Despliegue aplicacion practica caso 2
- name: include vars globales
  include_vars: "/etc/ansible/playbook/roles/vars/main.yml"

- name: Montar NFS
  become: true
  mount:
    src: "{{ nfs_server }}:/nfs_k8s"
    path: "{{nfs_directorio}}"
    opts: rw,sync,hard
    boot: no
    state: mounted
    fstype: nfs
    
- name: Copiar fichero index.html al NFS para mostrar algo en el NGINX
  become: true
  template:
    src: index.html.j2
    dest: "{{nfs_directorio}}/index.html"
    owner: "{{ usuario }}"
    group: "{{ usuario }}"
    mode: 0644

- name: Unmount NFS
  become: true
  ansible.posix.mount:
    path: "{{nfs_directorio}}"
    state: unmounted

- name: Instalar cli py de openshift
  become: true
  pip:
    name: openshift

- name: Crear un namespace
  kubernetes.core.k8s:
    name: "{{ namespace }}"
    api_version: v1
    kind: Namespace
    state: present

- name: Crear almacenamiento (PV y PVC)
  kubernetes.core.k8s:
    state: present
    template: 'nfs-pv-pvc.yaml.j2'
    
- name: Crear POD y servicio "{{ nombreapp }}"
  kubernetes.core.k8s:
    state: present
    template: 'web-nfs.yaml.j2'

- name: Crear Ingress "{{ nombreapp }}"
  kubernetes.core.k8s:
    state: present
    template: 'ingress.yaml.j2'

- name: Crear config HAProxy "{{ nombreapp }}"
  kubernetes.core.k8s:
    state: present
    template: 'configmap.yaml.j2'

- name: Obtener el puerto de nateo de HAProxy
  shell: "kubectl get svc haproxy-kubernetes-ingress --namespace=haproxy-controller -o=jsonpath='{.spec.ports[?(@.port==80)].nodePort}'"
  register: resultado_haproxy

- name: Imprimir puerto de nateo de HAProxy
  debug:
    msg: "{{ resultado_haproxy.stdout }}"

- name: Ip del nodo del HAProxy
  shell: "kubectl describe pod haproxy-kubernetes-ingress-default-backend --namespace=haproxy-controller |grep -i 10.0. | cut -d \/ -f2"
  register: ip_haproxy
  
- name: AÃ±adir Ip al /etc/hosts
  become: true
  lineinfile:
    dest: /etc/hosts
    regexp: '.*{{ maquina }}$'
    line: "{{ip_haproxy.stdout}} {{ maquina }}"
    backrefs: no

- name: Pausa de 3 minuto para que se configuren los POD
  ansible.builtin.pause:
    minutes: 3

- name: Obtener web
  uri:
    url: "http://{{ maquina }}:{{ resultado_haproxy.stdout }}/{{ apppath }}"
  register: web
  
- name: Imprimir web
  debug:
    msg: "{{ web }}"

- name: Borrar todo
  import_tasks: 99-borrar.yml
  when: borrar == "true"
